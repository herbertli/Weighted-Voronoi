{"version":3,"sources":["components/CustomSnackbar.jsx","components/GameOver.jsx","components/RoundOver.jsx","components/Scoreboard.jsx","utils.js","components/InfoModal.jsx","components/Board.jsx","components/GameStart.jsx","components/PlayerInfo.jsx","components/HelpModal.jsx","components/WeightSelectionModal.jsx","App.js","serviceWorker.js","index.js"],"names":["variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","withStyles","theme","backgroundColor","green","palette","dark","primary","amber","icon","fontSize","iconVariant","opacity","marginRight","spacing","unit","message","display","alignItems","props","classes","className","onClose","variant","other","Object","objectWithoutProperties","Icon","react_default","a","createElement","SnackbarContent_default","assign","classNames","aria-describedby","id","action","IconButton_default","key","aria-label","color","close","onClick","Close_default","button","margin","grid","playersList","handleClick","add","b","total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","player","value","scores","reduce","err","return","winners","winnerScore","rows","map","i","playerTotal","push","name","percentage","toFixed","totalScore","Grid_default","container","justify","item","xs","Typography_default","gutterBottom","style","textAlign","length","join","Table_default","padding","TableHead_default","TableRow_default","TableCell_default","numeric","TableBody_default","row","component","scope","background","Button_default","RoundOver","saveBoard","link","document","canvas","getElementById","href","toDataURL","download","click","_this$props","this","roundNum","numPlayers","React","Component","Scoreboard","tableRows","headerRow","numStones","showTotal","totals","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","percentages","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","score","selected","currentPlayer","Fragment","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","e","weightRemaining","stonesRemaining","piecesPlaced","TableFooter_default","colSpan","float","colors","colorRGB","checkValid","nx","ny","piecesList","minDist","piece","x","y","Math","pow","calculateBoard","width","height","owners","influences","pieceInfluence","weight","playerInd","maxInfluence","max","apply","indexOf","Transition","Slide_default","direction","InfoModal","open","Dialog_default","scroll","aria-labelledby","TransitionComponent","handleClose","DialogTitle_default","DialogContent_default","paragraph","Board","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","event","rect","current","getBoundingClientRect","clientX","left","clientY","top","hoveringPiece","setState","showInfo","selectedPiece","handleCanvasClick","handleHover","ctx","hoverCanvas","getContext","clearCanvas","r","g","beginPath","arc","PI","fillStyle","concat","lineWidth","strokeStyle","fill","stroke","createRef","state","_this$props2","newPiece","drawBoard","drawStones","_this$props3","htx","nextProps","nextState","clearRect","_piecesList$b","imageData","getImageData","data","index","owner","gridColor","putImageData","_this2","_this$state","parentDiv","pCanvas","ref","hCanvas","onMouseMove","components_InfoModal","position","border","zIndex","GameStart","handleChange","_this$setState","isValid","validateState","defineProperty","target","propName","handleSubmit","_this$validateState2","showErrorPlayers","showErrorStones","showErrorGrav","showErrorDist","gravPer","newOptions","parseInt","nNum","nStone","nGrav","nDist","isNaN","Number","isInteger","_this$state2","Paper_default","root","elevation","TextField_default","label","onChange","objectSpread","mixins","gutters","paddingTop","paddingBottom","Text","children","LText","HelpModal_Text","marginTop","screenImg","gameoverImg","src","alt","HelpModal_LText","WeightModal","showErrorWeight","selectedWeight","nWeight","prevProps","DialogContentText_default","DialogActions_default","handleCancel","App","initialState","stage","isPlaying","initialRound","displayHelpBox","showWeightOverlay","snackOpen","createNewPlayer","createNewPiece","ind","newStage","newPlayers","handlePlayerChange","toConsumableArray","handleBoardClick","getValidPlayer","newPlayer","handleWeightSelection","_this$state3","newPieces","nextPlayer","cancelWeightSelection","closeHelpModal","renderOverlay","_this$state4","components_GameStart","components_PlayerInfo","resetGame","resetRound","_this$state5","handleSnackClose","reason","toggleScoreBoard","renderGame","_this$state6","_calculateBoard","sm","md","components_Board","components_GameOver","lastScores","components_Scoreboard","components_RoundOver","_this$state7","HelpOutline_default","renderScene","components_HelpModal","WeightSelectionModal","Snackbar_default","anchorOrigin","vertical","horizontal","autoHideDuration","CustomSnackbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e5ebcd5.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst styles = theme => ({\n  success: {\n    backgroundColor: green[600],\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n  },\n  info: {\n    backgroundColor: theme.palette.primary.dark,\n  },\n  warning: {\n    backgroundColor: amber[700],\n  },\n  icon: {\n    fontSize: 20,\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing.unit,\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n});\n\nfunction MySnackbarContent(props) {\n  const { classes, className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={classNames(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={classNames(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton\n          key=\"close\"\n          aria-label=\"Close\"\n          color=\"inherit\"\n          className={classes.close}\n          onClick={onClose}\n        >\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nexport default withStyles(styles)(MySnackbarContent);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n  },\n  grid: {\n    margin: theme.spacing.unit,\n  }\n});\n\nconst GameOver = (props) => {\n  const { playersList, handleClick, classes } = props;\n  const add = (a, b) => a + b\n  let total = 0;\n  for (let player of playersList) {\n    total += player.scores.reduce(add);\n  }\n\n  let winners = [];\n  let winnerScore = -1;\n  const rows = playersList.map((player, i) => {\n    const playerTotal = player.scores.reduce(add);\n    if (playerTotal >= winnerScore) {\n      if (playerTotal === winnerScore) {\n        winners.push(player.name);\n      } else {\n        winners = [player.name];\n        winnerScore = playerTotal;\n      }\n    }\n    return {\n      percentage: (playerTotal / total * 100.0).toFixed(2),\n      name: player.name,\n      totalScore: playerTotal,\n      color: player.color,\n      id: i,\n    };\n  });\n\n  return (<Grid container justify=\"center\">\n  <Grid item xs={12} className={classes.grid}>\n      <Typography variant=\"h5\" gutterBottom style={{ textAlign: \"center\" }}>\n        Game Over! { winners.length > 1 ? winners.join(', ') : winners[0] } { winners.length > 1 ? \"Win!\" : \"Wins!\" }\n      </Typography>\n      </Grid>\n      <Grid item xs={12}>\n    <Table padding=\"dense\">\n      <TableHead>\n        <TableRow>\n          <TableCell>Name</TableCell>\n          <TableCell numeric>Total Score</TableCell>\n          <TableCell numeric>Total %</TableCell>\n          <TableCell numeric>Color</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {rows.map(row => {\n          return (\n            <TableRow key={row.id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {row.name}\n              </TableCell>\n              <TableCell numeric>{row.totalScore}</TableCell>\n              <TableCell numeric>{row.percentage}</TableCell>\n              <TableCell style={{ background: row.color }}></TableCell>\n            </TableRow>\n          );\n        })}\n      </TableBody>\n    </Table>\n    </Grid>\n    <Grid item>\n    <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleClick}>\n      New Game\n    </Button>\n    </Grid>\n  </Grid>);\n}\n\nexport default withStyles(styles)(GameOver);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,\n  },\n  grid: {\n    margin: theme.spacing.unit,\n  }\n});\n\nclass RoundOver extends React.Component {\n\n  saveBoard = () => {\n    const link = document.createElement('a');\n    const canvas = document.getElementById(\"physCanvas\");\n    link.href = canvas.toDataURL();\n    link.download = \"board.png\";\n    link.click();\n  }\n\n  render() {\n    const { handleClick, classes, roundNum, numPlayers } = this.props;\n    return (\n      <Grid container justify=\"center\" className={classes.grid}>\n        <Grid item xs={12}>\n          <Typography variant=\"h5\" gutterBottom style={{ textAlign: \"center\" }}>\n            Round {roundNum} Over!\n      </Typography>\n        </Grid>\n        {roundNum + 1 <= numPlayers ?\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleClick}>\n            Next Round\n        </Button>\n        </Grid> : null }\n        {roundNum + 1 > numPlayers ?\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleClick}>\n            Next\n        </Button>\n        </Grid> : null }\n        <Grid item>\n          <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={this.saveBoard}>\n            Save Board\n      </Button>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(RoundOver);","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport TableFooter from '@material-ui/core/TableFooter';\n\nconst Scoreboard = (props) => {\n  const { scores, playersList, numStones, showTotal, handleClick } = props;\n  let tableRows;\n  let headerRow;\n  if (showTotal) {\n    let total = 0;\n    let totals = [];\n    for (let player of playersList) {\n      let playerTotal = 0;\n      for (let score of player.scores) {\n        playerTotal += score;\n      }\n      totals.push(playerTotal);\n      total += playerTotal;\n    }\n    const percentages = playersList.map(player => {\n      if (total === 0) {\n        return 0;\n      } else {\n        let playerTotal = 0;\n        for (let score of player.scores) {\n          playerTotal += score;\n        }\n        return ((playerTotal / total) * 100).toFixed(2);\n      }\n    });\n\n    const rows = playersList.map((player, i) => {\n      return {\n        name: player.name,\n        color: player.color,\n        score: totals[i],\n        percentage: percentages[i],\n        id: i,\n      };\n    });\n\n    tableRows = rows.map(row => {\n      return (\n        <TableRow key={row.id} selected={row.id === props.currentPlayer}>\n          <TableCell component=\"th\" scope=\"row\">\n            {row.name}\n          </TableCell>\n          <TableCell numeric>{row.score}</TableCell>\n          <TableCell numeric>{row.percentage}</TableCell>\n          <TableCell style={{ background: row.color }}></TableCell>\n        </TableRow>\n      );\n    });\n    headerRow = (<>\n      <TableCell>Name</TableCell>\n      <TableCell numeric>Total Score</TableCell>\n      <TableCell numeric>Total %</TableCell>\n      <TableCell numeric>Color</TableCell>\n    </>);\n  } else {\n    let total = 0;\n    for (let score of scores) {\n      total += score;\n    }\n    const percentages = scores.map(e => {\n      if (total === 0) return 0;\n      else return ((e / total) * 100).toFixed(2);\n    });\n\n    const rows = playersList.map((player, i) => {\n      return {\n        name: player.name,\n        color: player.color,\n        score: scores[i],\n        weightRemaining: player.weightRemaining,\n        stonesRemaining: numStones - player.piecesPlaced,\n        percentage: percentages[i],\n        id: i,\n      };\n    });\n    tableRows = rows.map(row => {\n      return (\n        <TableRow key={row.id} selected={row.id === props.currentPlayer}>\n          <TableCell component=\"th\" scope=\"row\">\n            {row.name}\n          </TableCell>\n          <TableCell numeric>{row.score}</TableCell>\n          <TableCell numeric>{row.weightRemaining}</TableCell>\n          <TableCell numeric>{row.stonesRemaining}</TableCell>\n          <TableCell numeric>{row.percentage}</TableCell>\n          <TableCell style={{ background: row.color }}></TableCell>\n        </TableRow>\n      );\n    });\n    headerRow = (<>\n      <TableCell>Name</TableCell>\n      <TableCell numeric>Score</TableCell>\n      <TableCell numeric>Weight Left</TableCell>\n      <TableCell numeric>Stones Left</TableCell>\n      <TableCell numeric>%</TableCell>\n      <TableCell numeric>Color</TableCell>\n    </>)\n  }\n\n  return (\n    <Table padding=\"dense\">\n      <TableHead>\n        <TableRow>\n          {headerRow}\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {tableRows}\n      </TableBody>\n      <TableFooter>\n        <TableRow>\n          <TableCell colSpan={showTotal ? 4 : 6}>\n            <Button variant=\"contained\" color=\"primary\" onClick={handleClick} style={{ float: 'right' }}>\n              {showTotal ? 'Show Round Scores' : 'Show Total Scores'}\n            </Button>\n          </TableCell>\n        </TableRow>\n      </TableFooter>\n    </Table>\n  );\n}\n\nexport default Scoreboard;","const colors = ['red', 'blue', 'green', 'orange', 'yellow', 'purple', 'silver', 'olive', 'teal'];\n\nconst colorRGB = [\n    [255, 0, 0],\n    [0, 0, 255],\n    [0, 255, 0],\n    [255, 165, 0],\n    [255, 255, 0],\n    [128, 0, 128],\n    [192, 192, 192],\n    [128, 128, 0],\n    [0, 128, 128],\n];\n\nconst checkValid = (nx, ny, piecesList, minDist) => {\n    for (let piece of piecesList) {\n        const { x, y } = piece;\n        const dist = Math.pow(nx - x, 2) + Math.pow(ny - y, 2);\n        if (dist < Math.pow(minDist, 2)) return false;\n    }\n    return true;\n}\n\nconst calculateBoard = (width, height, piecesList, numPlayers) => {\n    let owners = [];\n    let scores = [];\n    for (let i = 0; i < numPlayers; i++) scores.push(0);\n    for (let x = 0; x < width; x += 1) {\n        owners.push([]);\n        for (let y = 0; y < height; y += 1) {\n            let influences = [];\n            for (let i = 0; i < numPlayers; i++) influences.push(0);\n            for (let piece of piecesList) {\n                const pieceInfluence = piece.weight / (Math.pow(piece.x - x, 2) + Math.pow(piece.y - y, 2));\n                influences[piece.playerInd] += pieceInfluence;\n            }\n            const maxInfluence = Math.max(...influences);\n            if (maxInfluence !== 0) {\n                owners[x][y] = influences.indexOf(maxInfluence);\n                scores[owners[x][y]] += 1;\n            } else {\n                owners[x][y] = -1;\n            }\n        }\n    }\n    return { owners, scores };\n}\n\nexport { colors, colorRGB, checkValid, calculateBoard };","import React from 'react';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\n\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nconst InfoModal = (props) => {\n  const { piece, open } = props;\n  return (\n    <Dialog\n      open={open}\n      scroll=\"paper\"\n      aria-labelledby=\"scroll-dialog-title\"\n      TransitionComponent={Transition}\n      onClose={props.handleClose}\n    >\n      <DialogTitle id=\"weight-dialog-title\">Piece Info</DialogTitle>\n      <DialogContent>\n        <Typography variant=\"body1\" paragraph>\n            X Position: {piece ? piece.x : \"null\"}\n        </Typography>\n        <Typography variant=\"body1\" paragraph>\n            Y Position: {piece ? piece.y : \"null\"}\n        </Typography>\n        <Typography variant=\"body1\" paragraph>\n            Weight of Piece: {piece ? piece.weight : \"null\"}\n        </Typography>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default InfoModal;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { checkValid, colors, colorRGB } from './../utils';\nimport InfoModal from './InfoModal';\n\nconst styles = () => ({\n  parentDiv: {\n    position: 'relative',\n    width: '500px',\n    height: '500px',\n    margin: 'auto',\n  },\n  hCanvas: {\n    border: \"1px solid hsl(0, 0%, 0%)\",\n    position: \"absolute\",\n    top: '0px',\n    left: '0px',\n    zIndex: 1\n  },\n  pCanvas: {\n    border: \"1px solid hsl(0, 0%, 0%)\",\n    position: \"relative\",\n    zIndex: 0\n  }\n});\n\nclass Board extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n    this.hoverCanvas = React.createRef();\n    this.state = {\n      showInfo: false,\n      selectedPiece: null,\n    }\n  }\n\n  componentDidMount() {\n    const { piecesList, owners, newPiece } = this.props;\n    const ctx = this.canvas.current.getContext('2d');\n    this.clearCanvas(ctx);\n    this.drawBoard(ctx, owners);\n    this.drawStones(ctx, piecesList, newPiece);\n  }\n\n  componentDidUpdate() {\n    const { piecesList, owners, newPiece } = this.props;\n    const ctx = this.canvas.current.getContext('2d');\n    const htx = this.hoverCanvas.current.getContext('2d');\n    this.clearCanvas(ctx);\n    this.clearCanvas(htx);\n    this.drawBoard(ctx, owners);\n    this.drawStones(ctx, piecesList, newPiece);\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextState.showInfo !== this.state.showInfo) {\n      return true;\n    }\n    if (nextProps.piecesList !== this.props.piecesList) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  clearCanvas(ctx) {\n    ctx.clearRect(0, 0, 500, 500);\n  }\n\n  drawStones(ctx, piecesList, newPiece) {\n    const radius = 5;\n    for (let b = 0; b < piecesList.length; b += 1) {\n      const { x, y, playerInd } = piecesList[b];\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n      ctx.fillStyle = colors[playerInd];\n      ctx.fill();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = '#003300';\n      ctx.stroke();\n    }\n    if (newPiece) {\n      const { x, y, playerInd } = newPiece;\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n      ctx.fillStyle = colors[playerInd];\n      ctx.fill();\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = '#ffcc00';\n      ctx.stroke();\n    }\n  }\n\n  drawBoard(ctx, owners) {\n    const imageData = ctx.getImageData(0, 0, 500, 500);\n    const { data } = imageData;\n    for (let y = 0; y < 500; y += 1) {\n      for (let x = 0; x < 500; x += 1) {\n        const index = (y * 500 + x) * 4;\n        const owner = owners[x][y];\n        if (owner > -1) {\n          const gridColor = colorRGB[owner];\n          for (let i = 0; i < 3; i += 1) {\n            data[index + i] = gridColor[i];\n          }\n          data[index + 3] = 125;\n        }\n      }\n    }\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  handleClick = (event) => {\n    const { piecesList } = this.props;\n    var rect = this.canvas.current.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n\n    let hoveringPiece = null;\n    for (let piece of piecesList) {\n      const nx = piece.x;\n      const ny = piece.y;\n      const dist = Math.pow(nx - x, 2) + Math.pow(ny - y, 2);\n      if (dist <= Math.pow(7, 2)) {\n        hoveringPiece = piece;\n        break;\n      }\n    }\n    if (hoveringPiece) {\n      this.setState({\n        showInfo: true,\n        selectedPiece: hoveringPiece,\n      });\n    } else if (this.props.handleCanvasClick) {\n      this.props.handleCanvasClick(x, y);\n    }\n  }\n\n  handleHover = (event) => {\n    if (!this.props.handleCanvasClick) return false;\n    const { currentPlayer, piecesList, minDist } = this.props;\n\n    const ctx = this.hoverCanvas.current.getContext('2d');\n    this.clearCanvas(ctx);\n\n    var rect = this.hoverCanvas.current.getBoundingClientRect();\n    const x = event.clientX - rect.left;\n    const y = event.clientY - rect.top;\n    const isValid = checkValid(x, y, piecesList, minDist);\n    if (isValid) {\n      const r = colorRGB[currentPlayer][0];\n      const g = colorRGB[currentPlayer][1];\n      const b = colorRGB[currentPlayer][2];\n      ctx.beginPath();\n      ctx.arc(x, y, 5, 0, 2 * Math.PI, false);\n      ctx.fillStyle = `rgb(${r}, ${g}, ${b}, 1)`;\n      ctx.lineWidth = 2;\n      ctx.strokeStyle = '#ffcc00';\n      ctx.fill();\n      ctx.stroke();\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    const { showInfo, selectedPiece } = this.state;\n\n    return (\n      <div className={classes.parentDiv}>\n        <canvas\n          id=\"physCanvas\"\n          className={classes.pCanvas}\n          height={500}\n          width={500}\n          ref={this.canvas}\n        />\n        <canvas\n          className={classes.hCanvas}\n          height={500}\n          width={500}\n          ref={this.hoverCanvas}\n          onClick={(e) => this.handleClick(e)}\n          onMouseMove={(e) => this.handleHover(e)}\n        />\n        <InfoModal piece={selectedPiece} open={showInfo} handleClose={() => this.setState({ showInfo: false, })} />\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Board);\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    textAlign: \"center\",\n  },\n});\n\nclass GameStart extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      numPlayers: 2,\n      numStones: 5,\n      gravPer: 1000,\n      minDist: 60,\n      showErrorPlayers: false,\n      showErrorStones: false,\n      showErrorGrav: false,\n      showErrorDist: false,\n    }\n  }\n\n  handleChange = name => event => {\n    const isValid = this.validateState({\n      [name]: event.target.value\n    });\n    let propName = -1;\n    if (name === 'numPlayers') {\n      propName = 'showErrorPlayers';\n    } else if (name === 'numStones') {\n      propName = 'showErrorStones';\n    } else if (name === 'gravPer') {\n      propName = 'showErrorGrav';\n    } else if (name === 'minDist') {\n      propName = 'showErrorDist';\n    }\n    this.setState({\n      [name]: event.target.value,\n      [propName]: isValid[propName],\n    });\n  }\n\n  handleSubmit = () => {\n    const { showErrorPlayers, showErrorStones, showErrorGrav, showErrorDist } = this.validateState(this.state);\n    if (showErrorPlayers || showErrorStones || showErrorGrav || showErrorDist) {\n      this.setState({\n        showErrorPlayers, showErrorStones, showErrorGrav, showErrorDist\n      });\n    } else {\n      let { numPlayers, numStones, gravPer, minDist } = this.state;\n      numPlayers = parseInt(numPlayers);\n      numStones = parseInt(numStones);\n      gravPer = parseInt(gravPer);\n      minDist = parseInt(minDist);\n      const newOptions = {\n        numPlayers, numStones, gravPer, minDist\n      }\n      this.props.handleSubmit(newOptions);\n    }\n  }\n\n  validateState = (state) => {\n    const { numPlayers, numStones, gravPer, minDist } = state;\n    const nNum = parseInt(numPlayers);\n    const nStone = parseInt(numStones);\n    const nGrav = parseInt(gravPer);\n    const nDist = parseInt(minDist);\n    const showErrorPlayers = isNaN(nNum) || !Number.isInteger(nNum) || nNum <= 1;\n    const showErrorStones = isNaN(nStone) || !Number.isInteger(nStone) || nStone < 1;\n    const showErrorGrav = isNaN(nGrav) || !Number.isInteger(nGrav) || nGrav <= 0;\n    const showErrorDist = isNaN(nDist) || nDist < 0;\n    return {\n      showErrorPlayers, showErrorStones, showErrorGrav, showErrorDist\n    };\n  }\n\n  render() {\n    const { numPlayers, gravPer, numStones, minDist, showErrorDist, showErrorPlayers, showErrorGrav, showErrorStones } = this.state;\n    const { classes } = this.props;\n\n    return <Paper className={classes.root} elevation={3}>\n      <Typography variant=\"h4\" component=\"h3\">\n        Game Options\n      </Typography>\n      <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={8}>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Number Of Players\"\n            value={numPlayers}\n            onChange={this.handleChange(\"numPlayers\")}\n            margin=\"normal\"\n            variant=\"outlined\"\n            error={showErrorPlayers}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Available Gravity Per Player\"\n            value={gravPer}\n            onChange={this.handleChange(\"gravPer\")}\n            margin=\"normal\"\n            variant=\"outlined\"\n            error={showErrorGrav}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Max Stones Per Player\"\n            value={numStones}\n            onChange={this.handleChange(\"numStones\")}\n            margin=\"normal\"\n            variant=\"outlined\"\n            error={showErrorStones}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <TextField\n            label=\"Minimum Distance\"\n            value={minDist}\n            onChange={this.handleChange(\"minDist\")}\n            margin=\"normal\"\n            variant=\"outlined\"\n            error={showErrorDist}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <Button variant=\"contained\" color=\"primary\" onClick={() => this.handleSubmit()}>\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  }\n}\n\nexport default withStyles(styles)(GameStart);","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    textAlign: \"center\",\n  },\n});\n\nconst PlayerInfo = (props) => {\n\n  const { playersList, classes } = props;\n  return <Paper elevation={3} className={classes.root}>\n    <Typography variant=\"h4\" component=\"h3\">\n      Player Info:\n    </Typography>\n    <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={8}>\n      {playersList.map((player, i) =>\n        <Grid item key={\"playerInfo\" + i}>\n          <TextField\n            label=\"Player Name:\"\n            value={player.name}\n            onChange={props.handleChange(i)}\n            margin=\"normal\"\n            variant=\"outlined\"\n          />\n        </Grid>\n      )}\n      <Grid item>\n        <Button variant=\"contained\" color=\"primary\" onClick={props.handleSubmit}>\n          Submit\n        </Button>\n      </Grid>\n    </Grid>\n  </Paper>\n}\n\nexport default withStyles(styles)(PlayerInfo);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\n\nfunction Transition(props) {\n  return <Slide direction=\"up\" {...props} />;\n}\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    marginTop: theme.spacing.unit,\n  },\n  screenImg: {\n    width: '50%',\n    margin: '0 auto',\n    display: 'block',\n  },\n  gameoverImg: {\n    width: '80%',\n    margin: '0 auto',\n    display: 'block',\n  }\n});\n\nconst Text = (props) => <Typography variant=\"body1\" {...props}>{props.children}</Typography>\nconst LText = (props) => <li><Text {...props}>{props.children}</Text></li>\n\nconst HelpModal = (props) => {\n\n  const { classes } = props;\n\n  return (\n    <Dialog\n      open={props.open}\n      onClose={props.handleClose}\n      scroll=\"paper\"\n      aria-labelledby=\"scroll-dialog-title\"\n      TransitionComponent={Transition}\n    >\n      <DialogContent>\n        <Grid container justify=\"center\" direction=\"row\" spacing={16} className={classes.root}>\n          <Grid item>\n            <Text variant=\"h4\" paragraph>Rules of the Game</Text>\n          </Grid>\n          <Grid item>\n            <Text variant=\"h5\" paragraph>Overview:</Text>\n            <hr/>\n            <Text paragraph>\n              Given a set of point-sized stones of various colors,\n              a Weighted Voronoi diagram is a tesselation of a plane into colored regions\n              such that every point with integer coordinates (x, y) has the color of the stones that\n              give it the greatest pull.\n            </Text>\n          </Grid>\n          <Grid item>\n            <img src=\"images/board.png\" alt=\"board\" className={classes.screenImg}/>\n          </Grid>\n          <Grid item>\n            <Text variant=\"h5\" paragraph>Playing a Round:</Text>\n            <hr/>\n            <Text paragraph>\n              Graviational Voronoi is a n player game that works as follows:\n            </Text>\n            <ul>\n              <LText>\n                n players are each assigned a color, and are each allocated W units of weight\n              </LText>\n              <LText>\n                Each player can distribute their allotted weight across a maximum of S stones on a 500x500 board.\n              </LText>\n              <LText>\n                The first player places one stone, then the second player places one stone and so on...\n              </LText>\n              <LText>\n                Each player places one stone until all players have placed S stones or have exhausted all their weight.\n              </LText>\n              <LText>\n                If a player cannot place a stone (either they have used all of their weight or placed all of their stones),\n                their turn is skipped\n              </LText>\n              <LText>\n                Additionally, every stone must be a Euclidean distance of at least d units\n                away from any other stone.\n              </LText>\n            </ul>\n            <Text>n, S, W, and d are set at the beginning of every game.</Text>\n            <Text paragraph>\n              The winner of a round is the player with the most controlled area at the end of the round.\n            </Text>\n          </Grid>\n          <Grid item>\n            <img src=\"images/options.png\" alt=\"options\" className={classes.screenImg}/>\n          </Grid>\n          <Grid item>\n            <Text variant=\"h5\" paragraph>Ending a Game:</Text>\n            <hr/>\n            <ul>\n              <LText>\n                If there are n players, the game runs for a total of n rounds, allowing each player to go first.\n              </LText>\n              <LText>\n                At the end of the game (after n rounds), each players' scores over all rounds are summed.\n              </LText>\n              <LText>\n                The player with the highest combined score over all n rounds is declared the winner!\n              </LText>\n            </ul>\n          </Grid>\n          <Grid item>\n            <img src=\"images/gameover.png\" alt=\"gameover\" className={classes.gameoverImg}/>\n          </Grid>\n          <Grid item>\n            <Text variant=\"h5\" paragraph>Pull Calculation:</Text>\n            <hr/>\n            <Text paragraph>\n              The pull for a color c at point p with coordinates (x, y) is calculated as follows:\n            </Text>\n            <Text paragraph>Supposing that color c has k stones placed:</Text>\n            <ul>\n              <LText>\n                Take all k stones and compute their Euclidean distances to point p\n                say d1, d2, ... dk.\n              </LText>\n              <LText>\n                Take the weights of all k stones w1, ..., wk\n              </LText>\n              <LText>\n                pull(c, p) = (w/(d1*d1)) + (w/(d2*d2)) + ... + (w/(dk*dk)).\n              </LText>\n            </ul>\n            <Text paragraph>\n              It's as if we're computing the color of a point based on the color that gives\n              the greatest pull.\n            </Text>\n          </Grid>\n          <Grid item>\n            <Button onClick={props.handleClose} color=\"primary\" variant=\"contained\">\n              Got It!\n            </Button>\n          </Grid>\n        </Grid>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default withStyles(styles)(HelpModal);\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\n\nclass WeightModal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedWeight: null,\n      showErrorWeight: false,\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.currentPlayer !== prevProps.currentPlayer) {\n      this.setState({\n        selectedWeight: null,\n        showErrorWeight: false,\n      });\n    }\n  }\n\n  handleChange = name => event => {\n    const { showErrorWeight } = this.validateState(event.target.value);\n    this.setState({\n      showErrorWeight: showErrorWeight,\n      [name]: event.target.value,\n    });\n  };\n\n  validateState = (selectedWeight) => {\n    if (!selectedWeight)\n      selectedWeight = this.state.selectedWeight;\n    const { weightRemaining } = this.props.currentPlayer;\n    const nWeight = parseInt(selectedWeight);\n    const showErrorWeight = isNaN(nWeight) || !Number.isInteger(nWeight) || nWeight > weightRemaining || nWeight <= 0;\n    return {\n      showErrorWeight\n    };\n  }\n\n  handleSubmit = () => {\n    const { showErrorWeight } = this.validateState();\n    if (showErrorWeight) {\n      this.setState({\n        showErrorWeight\n      });\n    } else {\n      let { selectedWeight } = this.state;\n      selectedWeight = parseInt(selectedWeight);\n      this.props.handleClose(selectedWeight)\n    }\n  }\n\n  render() {\n    return (\n      <Dialog\n        open={this.props.open}\n        scroll=\"paper\"\n        aria-labelledby=\"weight-dialog-title\"\n      >\n        <DialogTitle id=\"weight-dialog-title\">Weight Selection</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Please Select a Weight\n          </DialogContentText>\n          <TextField\n            label=\"Weight\"\n            onChange={this.handleChange('selectedWeight')}\n            margin=\"normal\"\n            variant=\"outlined\"\n            error={this.state.showErrorWeight}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this.props.handleCancel} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={() => this.handleSubmit()} color=\"primary\">\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n}\nexport default WeightModal;\n","import React, { Component } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport QuestionIcon from '@material-ui/icons/HelpOutline';\nimport Snackbar from '@material-ui/core/Snackbar';\n\nimport CustomSnackbar from './components/CustomSnackbar';\nimport GameOver from './components/GameOver';\nimport RoundOver from './components/RoundOver'\nimport Scoreboard from './components/Scoreboard';\nimport Board from './components/Board';\nimport GameStart from './components/GameStart';\nimport PlayerInfo from './components/PlayerInfo';\nimport HelpModal from './components/HelpModal';\nimport WeightSelectionModal from './components/WeightSelectionModal';\nimport { checkValid, colors, calculateBoard } from './utils';\n\nclass App extends Component {\n\n  initialState = {\n    stage: 'GAME_SETTINGS',\n    numPlayers: 2,\n    numStones: 5,\n    minDist: 60.0,\n    playersList: [],\n    gravPer: 1000,\n    isPlaying: false,\n    roundNum: 0,\n    showTotal: false,\n  }\n\n  initialRound = {\n    piecesList: [],\n    displayHelpBox: false,\n    showWeightOverlay: false,\n    currentPlayer: 0,\n    newPiece: null,\n    snackOpen: false,\n  }\n\n  constructor() {\n    super();\n    this.state = {\n      ...this.initialRound,\n      ...this.initialState\n    };\n  }\n\n  createNewPlayer = (i, gravPer) => {\n    return {\n      name: \"Player \" + (i + 1),\n      color: colors[i],\n      weightRemaining: gravPer,\n      piecesPlaced: 0,\n      scores: [],\n    }\n  }\n\n  createNewPiece = (x, y, weight, ind) => {\n    return {\n      x,\n      y,\n      weight,\n      playerInd: ind\n    }\n  }\n\n  handleSubmit = (newOptions) => {\n    let newStage = this.state.stage;\n    if (newStage === 'GAME_SETTINGS') {\n      newStage = 'PLAYER_LIST';\n      let newPlayers = [];\n      for (let i = 0; i < newOptions.numPlayers; i++) {\n        newPlayers.push(this.createNewPlayer(i, newOptions.gravPer));\n      }\n      this.setState({\n        ...newOptions,\n        playersList: newPlayers,\n        stage: newStage,\n      });\n    } else if (newStage === 'PLAYER_LIST') {\n      newStage = 'PLAYING_ROUND';\n      this.setState({\n        currentPlayer: 0,\n        stage: newStage,\n        isPlaying: true,\n      });\n    }\n  }\n\n  handlePlayerChange = (ind) => (event) => {\n    let newPlayers = [...this.state.playersList];\n    newPlayers[ind].name = event.target.value;\n    this.setState({\n      playersList: newPlayers,\n    });\n  }\n\n  handleCanvasClick = (x, y) => {\n    this.handleBoardClick(x, y, this.state.currentPlayer);\n  }\n\n  handleBoardClick = (x, y, playerInd) => {\n    const { piecesList, minDist } = this.state;\n    const isValid = checkValid(x, y, piecesList, minDist);\n    if (!isValid) {\n      this.setState({\n        snackOpen: true,\n      });\n    } else {\n      this.setState({\n        showWeightOverlay: true,\n        newPiece: { x, y, playerInd }\n      });\n    }\n  }\n\n  getValidPlayer = (currentPlayer, playersList) => {\n    const { numPlayers, numStones } = this.state;\n    for (let i = 1; i <= numPlayers; i += 1) {\n      const newPlayer = (currentPlayer + i) % numPlayers\n      if (playersList[newPlayer].weightRemaining > 0 && playersList[newPlayer].piecesPlaced + 1 <= numStones) {\n        return newPlayer;\n      }\n    }\n    return -1;\n  }\n\n  handleWeightSelection = (weight) => {\n    const { piecesList, newPiece, currentPlayer, playersList } = this.state;\n    const { x, y, playerInd } = newPiece;\n    let newPieces = [...piecesList];\n    newPieces.push(this.createNewPiece(x, y, weight, playerInd));\n    let newPlayers = [...playersList];\n    newPlayers[playerInd].weightRemaining -= weight;\n    newPlayers[playerInd].piecesPlaced += 1;\n    const nextPlayer = this.getValidPlayer(currentPlayer, newPlayers);\n    if (nextPlayer === -1) {\n      this.setState({\n        piecesList: newPieces,\n        showWeightOverlay: false,\n        playersList: newPlayers,\n        currentPlayer: -1,\n        stage: 'ROUND_OVER',\n        newPiece: null,\n      });\n    } else {\n      this.setState({\n        showWeightOverlay: false,\n        piecesList: newPieces,\n        currentPlayer: nextPlayer,\n        playersList: newPlayers,\n        newPiece: null,\n      });\n    }\n  }\n\n  cancelWeightSelection = () => {\n    this.setState({\n      showWeightOverlay: false,\n      newPiece: null\n    });\n  }\n\n  closeHelpModal = () => {\n    this.setState({ displayHelpBox: false });\n  };\n\n  renderOverlay = () => {\n    const { stage, playersList } = this.state;\n    switch (stage) {\n      case 'GAME_SETTINGS':\n        return <GameStart\n          handleSubmit={this.handleSubmit}\n        />\n      case 'PLAYER_LIST':\n      default:\n        return <PlayerInfo\n          playersList={playersList}\n          handleChange={this.handlePlayerChange}\n          handleSubmit={this.handleSubmit}\n        />\n    }\n  }\n\n  resetGame = () => {\n    this.setState({\n      ...this.initialState,\n      ...this.initialRound,\n    });\n  }\n\n  resetRound = (scores) => {\n    const { playersList, gravPer, numPlayers, roundNum } = this.state;\n    let newPlayers = [...playersList];\n    for (let i = 0; i < newPlayers.length; i += 1) {\n      let player = newPlayers[i];\n      player.piecesPlaced = 0;\n      player.weightRemaining = gravPer;\n      player.scores.push(scores[i]);\n    }\n    let newStage = 'PLAYING_ROUND';\n    if (roundNum + 1 === numPlayers) {\n      newStage = 'GAME_OVER'\n      this.setState({\n        stage: newStage,\n        playersList: newPlayers,\n        roundNum: roundNum + 1,\n        currentPlayer: roundNum + 1,\n      });\n    } else {\n      this.setState({\n        ...this.initialRound,\n        stage: newStage,\n        playersList: newPlayers,\n        roundNum: roundNum + 1,\n        currentPlayer: roundNum + 1,\n      });\n    }\n  }\n\n  handleSnackClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    this.setState({ snackOpen: false });\n  };\n\n  toggleScoreBoard = () => {\n    this.setState({ showTotal: !this.state.showTotal });\n  }\n\n  renderGame = () => {\n    const {\n      piecesList,\n      playersList,\n      numPlayers,\n      currentPlayer,\n      newPiece,\n      stage,\n      numStones,\n      minDist,\n      roundNum,\n      showTotal,\n    } = this.state;\n    const { scores, owners } = calculateBoard(500, 500, piecesList, numPlayers);\n\n    return (<>\n      <Grid item xs={12} sm={12} md={6}>\n        <Board\n          piecesList={piecesList}\n          owners={owners}\n          handleCanvasClick={stage === 'PLAYING_ROUND' ? this.handleCanvasClick : null}\n          newPiece={newPiece}\n          currentPlayer={currentPlayer}\n          minDist={minDist}\n        />\n      </Grid>\n      <Grid item xs={12} sm={12} md={6}>\n        <Grid container>\n          <Grid item xs={12}>\n            <Typography component=\"h4\" variant=\"h4\" style={{ textAlign: \"center\" }} gutterBottom>\n              Round {roundNum + 1}\n            </Typography>\n          </Grid>\n          <Grid item xs={12}>\n            { stage === 'GAME_OVER' ? <GameOver handleClick={this.resetGame} playersList={playersList} lastScores={scores} /> :\n            <Scoreboard handleClick={this.toggleScoreBoard} showTotal={showTotal} scores={scores} playersList={playersList} currentPlayer={currentPlayer} numStones={numStones} /> }\n          </Grid>\n          <Grid item xs={12}>\n            { stage === 'ROUND_OVER' ? <RoundOver numPlayers={numPlayers} roundNum={roundNum + 1} handleClick={() => this.resetRound(scores)} /> : null }\n          </Grid>\n        </Grid>\n      </Grid>\n    </>);\n  }\n\n  renderScene(stage) {\n    if (stage === 'GAME_SETTINGS') {\n      return (<Grid item xs={10} sm={6} md={4}>{this.renderOverlay()}</Grid>);\n    } else if (stage === 'PLAYER_LIST') {\n      return (<Grid item xs={10} sm={6} md={4}>{this.renderOverlay()}</Grid>);\n    } else {\n      return this.renderGame();\n    }\n  }\n\n  handleClose() {\n    this.setState({\n      snackOpen: false\n    });\n  }\n\n  render() {\n    const {\n      stage,\n      showWeightOverlay,\n      displayHelpBox,\n      playersList,\n      currentPlayer,\n      minDist,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <Grid container spacing={8} justify=\"center\">\n          <Grid item xs={12}>\n            <Typography component=\"h3\" variant=\"h3\" style={{ textAlign: \"center\" }} gutterBottom>\n              Weighted Voronoi\n              <IconButton color=\"primary\" aria-label=\"Help\" onClick={() => this.setState({ displayHelpBox: true})}>\n                <QuestionIcon />\n              </IconButton>\n            </Typography>\n          </Grid>\n          {this.renderScene(stage)}\n        </Grid>\n        <HelpModal open={displayHelpBox} handleClose={this.closeHelpModal} />\n        <WeightSelectionModal\n          open={showWeightOverlay}\n          handleClose={this.handleWeightSelection}\n          currentPlayer={playersList[currentPlayer]}\n          handleCancel={this.cancelWeightSelection}\n        />\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n          }}\n          open={this.state.snackOpen}\n          autoHideDuration={3000}\n          onClose={this.handleSnackClose}\n        >\n          <CustomSnackbar\n            onClose={() => this.handleClose()}\n            variant=\"error\"\n            message={`Stones must be at least ${minDist} units apart!`}\n          />\n        </Snackbar>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}